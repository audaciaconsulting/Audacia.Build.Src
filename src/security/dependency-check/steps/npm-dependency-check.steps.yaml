# Steps to run an NPM depdendency check
parameters:
  - name: path
    default: ''
  - name: projectName
    default: 'Build NPM'
  - name: publishAs
    default: ''
  - name: skip
    default: false
  - name: runEvenIfError
    default: false
  - name: continueIfVulnerabilities # Should the pipeline continue if vulnerabilities are found?
    default: false
  - name: suppressionsFilePath
    default: '$(Build.SourcesDirectory)/suppressions.xml'

steps:
  - task: PowerShell@2
    displayName: Find Suppressions File
    # Run if: (('success thus far' OR 'parameters.runEvenIfError == true') AND 'parameters.skip == false')
    condition: and(or(succeeded(), and(eq('${{parameters.runEvenIfError}}', true), succeededOrFailed())), eq('${{parameters.skip}}', false))
    inputs:
      targetType: inline
      pwsh: true
      script: |
          Write-Host "Checking for: ${{parameters.suppressionsFilePath}}"

          if (Test-Path ${{parameters.suppressionsFilePath}} ){
            Write-Host "Suppressions file found"
            echo "##vso[task.setvariable variable=suppressionsPath]${{parameters.suppressionsFilePath}}"
          }
          else {
            Write-Host "Suppressions file not found, no suppressions will be provided"
            echo "##vso[task.setvariable variable=suppressionsPath]$null"
          }

  - task: dependency-check-build-task@6
    displayName: NPM Dependency Check
    # Run if: (('success thus far' OR 'parameters.runEvenIfError == true') AND 'parameters.skip == false')
    condition: and(or(succeeded(), and(eq('${{parameters.runEvenIfError}}', true), succeededOrFailed())), eq('${{parameters.skip}}', false))
    continueOnError: ${{parameters.continueIfVulnerabilities}}
    inputs:
      suppressionPath: $(suppressionsPath)
      projectName: ${{parameters.projectName}}
      scanPath: '${{parameters.path}}/package-lock.json'
      format: 'HTML,JUNIT'
      failOnCVSS: '1'
      additionalArguments: '--nodeAuditSkipDevDependencies --disableNodeJS --nvdApiKey "cb027565-2f22-4e16-8992-9bf0a9a0cadc"'

    # Check if report exists, when not skipped and artifact name provided
  - powershell: |
      if (Test-Path $(Common.TestResultsDirectory)\dependency-check\dependency-check-report.html) {
        echo "##vso[task.setVariable variable=ReportExists]true"
      }
    displayName: Check for Dependency Check Report
    condition: and(succeededOrFailed(), eq('${{parameters.skip}}', false), ne('${{parameters.publishAs}}', ''))

    # Republish report to unique artifact
  - publish: $(Common.TestResultsDirectory)\dependency-check
    condition: eq(variables.ReportExists, 'true')
    displayName: Republish Dependency Check Report
    artifact: ${{parameters.publishAs}}

  - task: PublishTestResults@2
    displayName: "Publish JUnit Results"
    condition: and(succeededOrFailed(), eq('${{parameters.skip}}', false))
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/dependency-check-junit.xml'
      testRunTitle: ${{parameters.publishAs}}
      searchFolder: $(Common.TestResultsDirectory)\dependency-check\
      failTaskOnFailedTests: true
