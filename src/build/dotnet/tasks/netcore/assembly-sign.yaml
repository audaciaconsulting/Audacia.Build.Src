# Task to sign a .NET Core Project with the Audacia Code Signing certificate
parameters:
  - name: projects
    default: '**/*.csproj'

steps:
  - task: DownloadSecureFile@1
    displayName: Get Code Sign Certificate
    name: CodeSignCertificate
    inputs:
      secureFile: 'audacia.codesign.pfx'

  - task: PowerShell@2
    displayName: Sign Assemblies
    condition: and(succeeded(), and(not(eq(variables['Build.Reason'], 'PullRequest')), not(eq(variables['Build.Reason'], 'Schedule'))))
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $project = "${{parameters.projects}}"; # todo: what about multi-line values here
        $folderPath = [System.IO.Directory]::GetParent($project)
        $projectName = [System.IO.Path]::GetFileNameWithoutExtension($project)
        $files = Get-ChildItem -Path $folderPath -Filter "$projectName.dll" -Recurse
        $securePassword = ConvertTo-SecureString $(CertificatePassword) -AsPlainText -Force
        $certificate = Get-PfxCertificate -FilePath $(CodeSignCertificate.secureFilePath) -NoPromptForPassword -Password $securePassword

        foreach($file in $files) {

          try {
            Write-Host "Setting Authenticode Signature for $file"
            $result = Set-AuthenticodeSignature -FilePath $file -Certificate $certificate -Force -HashAlgorithm SHA256 -IncludeChain All -TimestampServer "http://timestamp.digicert.com"
            if ($result.Status.ToString().Contains("Error")) { Write-Error $result.StatusMessage }
            else {
              Write-Host $result.Status.ToString()
              Write-Host $result.StatusMessage.ToString()
            }
          }
          catch { Write-Warning $_ }
        }